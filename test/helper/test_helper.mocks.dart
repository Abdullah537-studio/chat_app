// Mocks generated by Mockito 5.4.4 from annotations
// in chat_2/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i15;
import 'dart:typed_data' as _i17;

import 'package:chat_2/core/error/failures.dart' as _i9;
import 'package:chat_2/features/auth/data/datasources/remote/auth_remote.dart'
    as _i12;
import 'package:chat_2/features/auth/domin/entites/auth_model/requiest/login_request_entity.dart'
    as _i10;
import 'package:chat_2/features/auth/domin/entites/auth_model/requiest/signup_request_entity.dart'
    as _i11;
import 'package:chat_2/features/auth/domin/entites/auth_model/response/login_response_entity.dart'
    as _i3;
import 'package:chat_2/features/auth/domin/entites/auth_model/response/signup_response_entity.dart'
    as _i4;
import 'package:chat_2/features/auth/domin/entites/image_partner_model/response/image_partner_response.dart'
    as _i5;
import 'package:chat_2/features/auth/domin/repository/auth_repository.dart'
    as _i6;
import 'package:chat_2/features/auth/domin/usecases/login_usecase.dart' as _i13;
import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:shared_preferences/shared_preferences.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginResponse_1 extends _i1.SmartFake implements _i3.LoginResponse {
  _FakeLoginResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSigninResponse_2 extends _i1.SmartFake
    implements _i4.SigninResponse {
  _FakeSigninResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImagePartnerResponse_3 extends _i1.SmartFake
    implements _i5.ImagePartnerResponse {
  _FakeImagePartnerResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_4 extends _i1.SmartFake
    implements _i6.AuthRepository {
  _FakeAuthRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i3.LoginResponse>> login(
          {required _i10.LoginRequest? loginEntite}) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {#loginEntite: loginEntite},
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i3.LoginResponse>>.value(
                _FakeEither_0<_i9.Failure, _i3.LoginResponse>(
          this,
          Invocation.method(
            #login,
            [],
            {#loginEntite: loginEntite},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i3.LoginResponse>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i4.SigninResponse>> signin(
          {required _i11.SigninRequest? signinEntite}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signin,
          [],
          {#signinEntite: signinEntite},
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i4.SigninResponse>>.value(
                _FakeEither_0<_i9.Failure, _i4.SigninResponse>(
          this,
          Invocation.method(
            #signin,
            [],
            {#signinEntite: signinEntite},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i4.SigninResponse>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i5.ImagePartnerResponse>>
      imagePartner() => (super.noSuchMethod(
            Invocation.method(
              #imagePartner,
              [],
            ),
            returnValue: _i8.Future<
                    _i2.Either<_i9.Failure, _i5.ImagePartnerResponse>>.value(
                _FakeEither_0<_i9.Failure, _i5.ImagePartnerResponse>(
              this,
              Invocation.method(
                #imagePartner,
                [],
              ),
            )),
          ) as _i8.Future<_i2.Either<_i9.Failure, _i5.ImagePartnerResponse>>);
}

/// A class which mocks [AuhtRemote].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuhtRemote extends _i1.Mock implements _i12.AuhtRemote {
  MockAuhtRemote() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.LoginResponse> login(
          {required _i10.LoginRequest? loginEntity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {#loginEntity: loginEntity},
        ),
        returnValue: _i8.Future<_i3.LoginResponse>.value(_FakeLoginResponse_1(
          this,
          Invocation.method(
            #login,
            [],
            {#loginEntity: loginEntity},
          ),
        )),
      ) as _i8.Future<_i3.LoginResponse>);

  @override
  _i8.Future<_i4.SigninResponse> signin(
          {required _i11.SigninRequest? signinEntity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signin,
          [],
          {#signinEntity: signinEntity},
        ),
        returnValue: _i8.Future<_i4.SigninResponse>.value(_FakeSigninResponse_2(
          this,
          Invocation.method(
            #signin,
            [],
            {#signinEntity: signinEntity},
          ),
        )),
      ) as _i8.Future<_i4.SigninResponse>);

  @override
  _i8.Future<_i5.ImagePartnerResponse> imagePartner() => (super.noSuchMethod(
        Invocation.method(
          #imagePartner,
          [],
        ),
        returnValue: _i8.Future<_i5.ImagePartnerResponse>.value(
            _FakeImagePartnerResponse_3(
          this,
          Invocation.method(
            #imagePartner,
            [],
          ),
        )),
      ) as _i8.Future<_i5.ImagePartnerResponse>);
}

/// A class which mocks [LoginUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUsecase extends _i1.Mock implements _i13.LoginUsecase {
  MockLoginUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.AuthRepository);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i3.LoginResponse>> call(
          {required _i10.LoginRequest? loginEntite}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#loginEntite: loginEntite},
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i3.LoginResponse>>.value(
                _FakeEither_0<_i9.Failure, _i3.LoginResponse>(
          this,
          Invocation.method(
            #call,
            [],
            {#loginEntite: loginEntite},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i3.LoginResponse>>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i14.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i8.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i7.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i17.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i17.Uint8List>.value(_i17.Uint8List(0)),
      ) as _i8.Future<_i17.Uint8List>);

  @override
  _i8.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
